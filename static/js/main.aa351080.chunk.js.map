{"version":3,"sources":["components/share-100.png","components/github.png","components/Header.tsx","components/Display.tsx","components/Form.tsx","beforeRender.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Header","id","onClick","navigator","window","share","title","text","url","then","alert","catch","error","console","log","alt","src","img","width","height","href","rel","target","github","Note","props","db","note","updateDisplay","transaction","objectStore","delete","oncomplete","deleteNote","descr","Display","useState","notes","setNotes","reRender","setReRender","useEffect","openCursor","onsuccess","e","cursor","result","prev","value","description","continue","length","map","key","Form","setTitle","descript","setDescript","addNewNote","installButton","installPWA","titleDOM","useRef","current","document","getElementById","type","placeholder","onChange","style","color","useBeforeFirstRender","f","hasRendered","setHasRendered","App","promptEvent","dbs","setDbs","setInstallButton","dbName","a","Promise","res","rej","undefined","indexedDB","request","open","onupgradeneeded","createObjectStore","keyPath","autoIncrement","createIndex","unique","onerror","addEventListener","className","add","prompt","userChoice","outcome","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","ReactDOM","render","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.aa351080.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/share-100.b1f04eda.png\";","module.exports = __webpack_public_path__ + \"static/media/github.85ad9140.png\";","import React from 'react'\nimport img from './share-100.png'\nimport github from './github.png'\n\nconst Header = () => {\n\n  // link to GitHub\n\n  const share = () => {\n    // https://stackoverflow.com/questions/47831741/property-share-does-not-exist-on-type-navigator\n    let navigator: any  // const navigator: any = window.navigator throws error\n    navigator = window.navigator\n\n    if (navigator.share) {\n      navigator.share({\n        title: 'IDB Notes',\n        text: 'IDB Notes React PWA',\n        url: 'https://idbnotes.imfast.io/',\n      })\n        .then(() => alert('Sharing successfull'))\n        .catch((error: any) => console.log('Error sharing', error));\n    } else {\n      alert('Sharing is supported only on mobile devices')\n    }\n  }\n\n  return (\n    <div id=\"header\">\n      <img id=\"share\" onClick={share} alt=\"share\" src={img} width=\"30\" height=\"30\" />\n      <h1>IDB Notes</h1>\n      <a id=\"gitHub\" href=\"https://github.com/DaniBencz/React.ts-IDB-Notes-PWA\" rel=\"noopener noreferrer\" target=\"_blank\">\n        <img alt=\"gitHub repo\" src={github} width=\"33\" height=\"33\"></img>\n      </a>\n    </div>\n  )\n}\n\nexport default Header","import React, { useEffect, useState } from 'react'\n\ninterface Note { id: number, title: string, descr: string }\n\nconst Note = (props: { db: any, note: Note, updateDisplay: () => void }) => {\n  const { db, note, updateDisplay } = props\n\n  const deleteNote = () => {\n    const transaction = db.transaction('notes_os', 'readwrite')\n    transaction.objectStore('notes_os').delete(note.id)\n    transaction.oncomplete = () => updateDisplay()\n  }\n\n  return (\n    <li id=\"note\">\n      <h3>{note.title}</h3>\n      <button onClick={() => deleteNote()}>Delete</button>\n      <p>{note.descr}</p>\n    </li>\n  )\n}\n\nconst Display = (props: { db: any }) => {\n  const { db } = props\n  let [notes, setNotes] = useState<Note[]>([])\n  let [reRender, setReRender] = useState<number>(1)\n\n  useEffect(() => {\n    setNotes([])  // empty state before beginning to refill it, else we end up with duplicates of old entries\n    if (db) {\n      let objectStore = db.transaction('notes_os').objectStore('notes_os')\n      objectStore.openCursor().onsuccess = (e: any) => {  // iterate over object store entries\n\n        let cursor = e.target.result\n        if (cursor) {\n          // setNotes([...notes, { title: cursor.value.title, descr: cursor.value.descr }])\n          setNotes(prev => [...prev, {\n            id: cursor.value.id,\n            title: cursor.value.title,\n            descr: cursor.value.description\n          }])\n          cursor.continue() // continue to next iteration\n        }\n      }\n    }\n  }, [db, reRender])  // if no 2nd (array) parameter, re-executes on every render\n\n  const updateDisplay = () => {\n    setReRender(reRender === 1 ? 2 : 1)\n  }\n\n  return (\n    <div id=\"display\">\n      {notes.length > 0 ? null : <h4>Your notes will appear here</h4>}\n      <ul>\n        {notes.map((note: Note) => {\n          return <Note key={note.id} db={db} note={note} updateDisplay={updateDisplay}></Note>\n        })}\n      </ul>\n    </div >\n  )\n}\n\nexport default Display","import React, { useState, useRef, useEffect } from 'react'\n\ninterface FormProp {\n  addNewNote: (title: string, descript: string) => void,\n  installButton: boolean,\n  installPWA: () => void // or simply: Function\n}\n\nconst Form = (props: FormProp) => {\n  const [title, setTitle] = useState('')\n  const [descript, setDescript] = useState('')\n  const { addNewNote, installButton, installPWA } = props\n  let titleDOM: any = useRef()  //  input#title DOM element\n\n  useEffect(() => {\n    titleDOM.current = document.getElementById('title')\n    console.log('rendering')\n  }, [])\n\n  const clearFieldAndSubmit = () => {\n    if (!title || title === 'Please provide title!') {\n      setTitle('Please provide title!')\n      titleDOM.current.style.color = 'red'\n    } else {\n      addNewNote(title, descript)\n      setTitle('')  // empty input fields\n      setDescript('')\n    }\n  }\n\n  const writeTitle = (e: any) => {\n    titleDOM.current.style.color = 'black'\n    setTitle(e.target.value)\n  }\n\n  return (\n    <div id=\"form\">\n      <h2>New Note</h2>\n      <label> {/* Accessibility optimasition would require a string here*/}\n        <input id=\"title\" type=\"text\" placeholder=\"Title\" value={title}\n          /* works with onInput too, but throws warning in console */\n          onChange={writeTitle}></input>\n      </label>\n      <label>\n        <input id=\"description\" type=\"text\" placeholder=\"Description\" value={descript}\n          onChange={(e: any) => setDescript(e.target.value)}></input>\n      </label>\n      <button id=\"create\" onClick={clearFieldAndSubmit}>Add to list</button>\n      {/* '&&' for inline conditional rendering */}\n      {installButton === true && <button id=\"install\" onClick={() => installPWA()}>Install Application</button>}\n    </div>\n  )\n}\n\nexport default Form","//https://medium.com/@stojanpeshov/react-hooks-component-will-mount-2c21ba2778a1\nimport { useState, useEffect } from 'react'\n\nconst useBeforeFirstRender = (f: Function) => {\n  const [hasRendered, setHasRendered] = useState(false)\n  useEffect(() => setHasRendered(true), [hasRendered])\n  if (!hasRendered) {\n    f()\n  }\n}\n\nexport default useBeforeFirstRender","import React, { useState, useRef } from 'react'\nimport Header from './components/Header'\nimport Display from './components/Display'\nimport Form from './components/Form'\nimport useBeforeFirstRender from './beforeRender'\nimport './App.css'\n\nconst App = () => {\n  let promptEvent: any = useRef() // add-to-homescreen event\n  const [dbs, setDbs] = useState<any>()\n  const [installButton, setInstallButton] = useState(false)\n  let dbName = useRef('pwa_notes_db')\n\n  const setUpDB = () => {\n    return new Promise((res, rej) => {\n      if (\"indexedDB\" in window && window.indexedDB !== undefined) {\n        const idbf: IDBFactory = window.indexedDB\n        const request: IDBOpenDBRequest = idbf.open(dbName.current, 1)\n\n        request.onupgradeneeded = (e: any) => { // runs the very first time, and on version changes\n          const db = e.target.result\n          const objectStore: IDBObjectStore = db.createObjectStore(\n            'notes_os', { keyPath: 'id', autoIncrement: true }\n          );\n          objectStore.createIndex('title', 'title', { unique: false })\n          objectStore.createIndex('description', 'description', { unique: false })\n          // res('upgraded')  no need to resolve here, onsuccess will get called anyway\n        }\n\n        request.onsuccess = (e: any) => { // gets called even if upgrade was called\n          setDbs(e.target.result)\n          res('db setup successfull')\n        }\n\n        request.onerror = (e: any) => res(request.error)\n      }\n      else alert(\"IndexedDB is not supported\")\n    })\n  }\n\n  useBeforeFirstRender(async () => {  // unlike useEffect, this will run before the first render\n    let result = await setUpDB()  // no real need, just experimenting here\n    console.log(result)\n\n    window.addEventListener('beforeinstallprompt', (e: any) => {\n      promptEvent.current = e // capture event to trigger later\n      setInstallButton(true)\n    })\n  })\n\n  const addNewNote = (title: string, descript: string) => {\n    console.log('db in add new', dbs)\n\n    const transaction = dbs.transaction('notes_os', 'readwrite')\n    const objectStore = transaction.objectStore('notes_os')\n    const add = objectStore.add({ title: title, description: descript })  // update with state values\n\n    add.onsuccess = () => {\n      window.indexedDB.open(dbName.current).onsuccess = (e: any) => {\n        setDbs(e.target.result) // need to re-set dbs in order to trigger Display render\n      }\n    }\n  }\n\n  const installPWA = () => {\n    promptEvent.current.prompt()\n    promptEvent.current.userChoice\n      .then((result: any) => { if (result.outcome === 'accepted') alert('Happy Noting!') })\n    setInstallButton(false)\n  }\n\n  const noDB = { color: 'white' }\n  if (!dbs) return <h1 style={noDB}>Waiting for Database Connection...</h1> // if no db access, no point rendering\n\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Display db={dbs}></Display>\n      <Form addNewNote={addNewNote} installButton={installButton} installPWA={installPWA}></Form>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}